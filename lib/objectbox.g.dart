// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/stock_item.dart';
import 'models/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1863247959599060771),
      name: 'UserModel',
      lastPropertyId: const obx_int.IdUid(7, 3884758224944047718),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4710988443420660804),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7674170100170613423),
            name: 'firstName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1988096767912639010),
            name: 'lastName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3919694847935656924),
            name: 'userName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6721872349304080194),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6996134833057943891),
            name: 'accountType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3884758224944047718),
            name: 'password',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5766409558164853547),
      name: 'StockItem',
      lastPropertyId: const obx_int.IdUid(6, 3931139792536201903),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3083605184390288838),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1683265649067683307),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4194566678260215610),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8364675703754492424),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1802779554897671988),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3931139792536201903),
            name: 'synced',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 5766409558164853547),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [760861351120320677],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        9194826212640845617,
        400937212476152057,
        6966722571018905010,
        7974049205838567260,
        7267736245137559340
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    UserModel: obx_int.EntityDefinition<UserModel>(
        model: _entities[0],
        toOneRelations: (UserModel object) => [],
        toManyRelations: (UserModel object) => {},
        getId: (UserModel object) => object.id,
        setId: (UserModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final userNameOffset = fbb.writeString(object.userName);
          final emailOffset = fbb.writeString(object.email);
          final accountTypeOffset = fbb.writeString(object.accountType);
          final passwordOffset = fbb.writeString(object.password);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, firstNameOffset);
          fbb.addOffset(2, lastNameOffset);
          fbb.addOffset(3, userNameOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addOffset(5, accountTypeOffset);
          fbb.addOffset(6, passwordOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final accountTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = UserModel(
              id: idParam,
              firstName: firstNameParam,
              lastName: lastNameParam,
              userName: userNameParam,
              email: emailParam,
              accountType: accountTypeParam,
              password: passwordParam);

          return object;
        }),
    StockItem: obx_int.EntityDefinition<StockItem>(
        model: _entities[1],
        toOneRelations: (StockItem object) => [],
        toManyRelations: (StockItem object) => {},
        getId: (StockItem object) => object.id,
        setId: (StockItem object, int id) {
          object.id = id;
        },
        objectToFB: (StockItem object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final imagePathOffset = fbb.writeString(object.imagePath);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, imagePathOffset);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addBool(5, object.synced);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final syncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final object = StockItem(
              id: idParam,
              name: nameParam,
              description: descriptionParam,
              imagePath: imagePathParam,
              createdAt: createdAtParam,
              synced: syncedParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// see [UserModel.id]
  static final id =
      obx.QueryIntegerProperty<UserModel>(_entities[0].properties[0]);

  /// see [UserModel.firstName]
  static final firstName =
      obx.QueryStringProperty<UserModel>(_entities[0].properties[1]);

  /// see [UserModel.lastName]
  static final lastName =
      obx.QueryStringProperty<UserModel>(_entities[0].properties[2]);

  /// see [UserModel.userName]
  static final userName =
      obx.QueryStringProperty<UserModel>(_entities[0].properties[3]);

  /// see [UserModel.email]
  static final email =
      obx.QueryStringProperty<UserModel>(_entities[0].properties[4]);

  /// see [UserModel.accountType]
  static final accountType =
      obx.QueryStringProperty<UserModel>(_entities[0].properties[5]);

  /// see [UserModel.password]
  static final password =
      obx.QueryStringProperty<UserModel>(_entities[0].properties[6]);
}

/// [StockItem] entity fields to define ObjectBox queries.
class StockItem_ {
  /// see [StockItem.id]
  static final id =
      obx.QueryIntegerProperty<StockItem>(_entities[1].properties[0]);

  /// see [StockItem.name]
  static final name =
      obx.QueryStringProperty<StockItem>(_entities[1].properties[1]);

  /// see [StockItem.description]
  static final description =
      obx.QueryStringProperty<StockItem>(_entities[1].properties[2]);

  /// see [StockItem.imagePath]
  static final imagePath =
      obx.QueryStringProperty<StockItem>(_entities[1].properties[3]);

  /// see [StockItem.createdAt]
  static final createdAt =
      obx.QueryDateProperty<StockItem>(_entities[1].properties[4]);

  /// see [StockItem.synced]
  static final synced =
      obx.QueryBooleanProperty<StockItem>(_entities[1].properties[5]);
}
